help "pcinsp" {
title "パネル･クラス･インスペクタ";
description "パネル･クラスの詳細設定";
}

パネル･クラス･インスペクタには、詳細設定を行っているパネル･クラスのプロパティが表示されます。必要に応じて、プロパティを表示および編集できます。  
 
パネル･クラスのプロパティは、一般、オプション、ヘッダーおよびソースの４つのノートブック･ページに分類されます。
 
一般ページ

クラス
このフィールドを使って、C++ パネル･クラスに名前を付けます。このクラス名は、有効な C++ クラス名でなければなりません。デフォルトで、Rogue Wave Views Studio では、対応するバッファ名の頭文字を大文字にしてクラスに名前を付けます。 
 
ベース・クラス
このトグル･ボタンを使って、生成したクラスにベース･クラスを指定します。デフォルトで、生成したクラスは IlVGadgetContainer から派生します。 

ファイル名
このフィールドには、選択したパネル･クラスが含まれるファイルの名前が表示されます。これは編集できません。 
 
データ
このフィールドには、パネル･データ･ファイル (.ilv ファイル) が保存されている場所が表示されます。 

ヘッダー
このフィールドを使って、パネル･クラス･ヘッダー･ファイルを生成する場所を設定します。このフィールドが空欄の場合、ヘッダー･ファイルは、アプリケーション･ヘッダー･ファイルと同じディレクトリに生成されます。

ソース
このフィールドを使って、パネル･クラス･ソース･ファイルを生成する場所を設定します。このフィールドが空欄の場合、ソース･ファイルは、アプリケーション･ソース･ファイルと同じディレクトリに生成されます。

オプション・ページ
 
データ
このトグル･ボタンをオンにして、C++ パネル･クラス･コードにデータ文字列を生成します。これにより、実行時にコンストラクタでデータ･ファイルを読み込む必要がなくなります。データを使って生成されたコードは、UNIX プラットフォームのみで使われます。MS/Windows では、生成した文字列データは使用されません。 
 
名前
このトグル･ボタンをオンにして、パネルの名前の付いたオブジェクトを返すメンバ関数を生成します。 

コールバックの宣言
Rogue Wave Views Studio には、コールバックを扱う簡単な方法が用意されています。[コールバックの宣言] トグル･ボタンをオンにすると、IlvGraphicCallback 関数が生成され、デフォルトの仮想メンバ関数が宣言されます。生成した IlvGraphicCallback では、Rogue Wave Views Studio に指定したコールバックと同じ名前の仮想メンバ関数を呼び出します。したがって、コールバックに使用する名前は、有効な C++ 関数の名前でなければなりません。 

[コールバック定義] トグル･ボタンを有効にするには、[コールバックの宣言] トグル･ボタンをオンにする必要があります。

コールバック定義
これらのコールバックの仮想メンバ関数に、デフォルトの定義コード (主関数) を生成して、実際のコールバックを定義する前にアプリケーションをテストすることができます。[コールバック] トグル･ボタンをオンにして、派生クラスのコールバックを独自のものに定義し直します。これらの関数の定義を生成しない場合は、[コールバック定義] トグル･ボタンをオフにします。これは、生成したクラスからクラスを派生させない場合に便利です。この場合、今後のコード生成によって消去されることのない別のファイルに、これらのメンバ関数の独自の定義を書くことができます。

コールバックの登録タスクは、C++ コードで生成されるため、コールバック･メソッドを定義するだけで済みます。

システム･ビュー
既存のシステム･ビューを使ってパネルを作成する場合は、このトグル･ボタンをオンにします。

システム・ビューの子
既存のシステム･ビューの子ウィンドウとしてパネルを作成する場合は、このトグル･ボタンをオンにします。
 
ヘッダー･ページ

このパネルに入力するテキストは、生成した #include ステートメントの後、生成したクラスの宣言の前に、パネル・クラス･ヘッダー･バッファにそのまま挿入されます。IlvGadgetContainer 以外のクラスから生成したクラスをサブクラス化する場合、ここに #include ステートメントを挿入して、ベース･クラスを宣言するファイルを含める必要があります。もちろん、コードを挿入する代わりに、この機能を使ってパネル・クラスにコメントを付けることもできます。

ソース･ページ

このパネルに入力するテキストは、生成したメンバ関数を定義する直前に、パネル・クラス・ソース・ファイルにそのまま挿入されます。このテキストを使って、生成ファイルにコメントを付けることも、または任意の C++ コードを挿入することもできます。

