help "appinsp" {
title "アプリケーション･インスペクタ"
description "アプリケーション･クラスの詳細設定";
}
アプリケーション･インスペクタには、カレント・アプリケーションのプロパティが表示されます。 
必要に応じて、プロパティを表示および編集できます。 
 
アプリケーションのプロパティは、一般、オプション、ヘッダーおよびソースの４つのノートブック･ページに分類されます。 
 
一般ページ

クラス
生成されたアプリケーション･クラスの名前は、クラス･フィールドで指定できます。 
デフォルトの名前は Testapp です。 
このフィールドで指定する名前は、有効な C++ クラス名でなければなりません。 
 
ベース・クラス
アプリケーションのベース・クラスは、ベース・クラス･フィールドで指定できます。 
デフォルトは IlvApplication です。 
このフィールドで指定する名前は、有効な C++ 名でなければなりません。

ファイル名
アプリケーションの説明が含まれる.iva ファイルの名前を示します。

データ
データ･フィールドには、アプリケーション･データ･ファイルが保存されている場所が表示されます。 
このフィールドは編集できません。 
アプリケーション･データ･ファイルの場所を変更するには、アプリケーション･エディタ･パネルの [ファイル] メニューから [名前を付けて保存] を選択し、選択ディレクトリに保存します。

ヘッダー
ヘッダー･フィールドを使って、アプリケーション･ヘッダー･ファイルを生成する場所を設定します。 
デフォルトで、ヘッダー･ファイルは、アプリケーション･データ･ファイルの保存先のディレクトリに生成されます。このディレクトリは、アプリケーション･データ･ファイル･ディレクトリに関連付けられます。

ヘッダー・ファイル領域
ヘッダー･ファイルが生成されるディレクトリは、指定のヘッダー･ディレクトリにヘッダー･ファイル領域を追加して取得します。オプションのヘッダー･ファイル領域を使って、#include ステートメントに生成されるサブディレクトリを指定します。

アプリケーション･ファイルがディレクトリ "/myappdir" にあり、ヘッダー･ディレクトリは “include”、およびヘッダー･ファイル領域は "myapp/" であるとすると、ヘッダー･ファイルはディレクトリ "/myappdir/include/myapp" に生成されます。 
アプリケーション･ヘッダー･ファイルに対応する、生成された #include ステートメントは次のようになります。

                #include <myapp/file1.h>
                #include <myapp/file2.h>
次のようにはなりませんので、ご注意ください。
                #include <file1.h>
                #include <file2.h>

ソース
ソース･フィールドを使って、アプリケーション･ソース･ファイルを生成する場所を設定します。デフォルトで、ソース･ファイルは、アプリケーション･データ･ファイルの保存先のディレクトリに生成されます。このディレクトリは、アプリケーション･データ･ファイル･ディレクトリに関連付けられます。

オブジェクトでは、オブジェクト･フィールドを使って、アプリケーションのメイク･ファイルを生成する場所を設定します。デフォルトで、メイク･ファイルは、アプリケーション･データ･ファイルの保存先のディレクトリに生成されます。このディレクトリは、アプリケーション･データ･ファイル･ディレクトリに関連付けられます。

システム
このオプション･メニューを使って、メイク･ファイルを生成するプラットフォームの名前を設定します。デフォルトは、Rogue Wave Views Studio を実行しているプラットフォームです。

Motif 
このトグル･ボタンは、システム･オプション･メニューで選択したプラットフォームが X11 プラットフォームの場合のみ表示されます。このトグル･ボタンをオンにすると、生成されたメイク･ファイルが Rogue Wave Views ライブラリの Motif バージョンを選択し、LibXt および LibXm ライブラリを使用アプリケーションにリンクします。


オプション･ページ

終了
独立したパネルに表示される終了ボタンは、生成したアプリケーションを実行している場合に有効になります。このボタンを使うと、アプリケーションを簡単に終了することができます。終了ボタンを設定する場合は、このトグル･ボタンをオンにします。

 
メイン関数
 
Rogue Wave Views Studio で、アプリケーション･ソース･ファイルに簡単な主関数を生成する場合、このトグル･ボタンを選択します。 
 
メイク・ファイル
簡単なメイク･ファイルを生成する場合は、このトグル･ボタンを選択します。

パネル・アクセサ
パネル･アクセサは、生成したアプリケーションのメンバ関数で、アプリケーションの特定のパネルにアクセスできます。パネル･アクセサをオンにすると、Rogue Wave Views Studio で各パネル･インスタンスのメンバ関数が生成されます。 

ヘッダーのインクルード
生成したアプリケーション･コードには、アプリケーションのパネル･クラスに生成したヘッダー･ファイルが含まれる必要があります。必要な #include ステートメントは、アプリケーション･ヘッダー･ファイルまたはアプリケーション･ソース･ファイルに生成することができます。パネル･アクセサを生成する場合 (パネル･アクセサ･トグル･ボタンがオン)、パネル･クラスのヘッダーがアプリケーション･ヘッダー･ファイルに含まれる必要があります。この場合、[ヘッダーのインクルード] トグル･ボタンは使用できません。それ以外の場合は、#include ステートメントを、アプリケーション･ヘッダー･ファイルではなく、アプリケーション･ソース･ファイルに生成できます。アプリケーション全体のコンパイル依存を最小限に抑えるためには、このトグル･ボタンをオフにします。 

ビットマップ読み込み 
ビットマップ読み込みフレームのトグル･ボタンを使って、生成したコードに定義済みのビットマップ読み込みを登録できます。 

ヘッダー･ページ
このパネルに入力するテキストは、生成した #include ステートメントの後、生成したクラスの宣言の前に、アプリケーション･ヘッダー･バッファにそのまま挿入されます。IlvApplication 以外のクラスから生成したクラスをサブクラス化する場合、ここに #include ステートメントを挿入して、ベース･クラスを宣言するファイルを含める必要があります。もちろん、コードを挿入する代わりに、この機能を使ってアプリケーションにコメントを付けることもできます。

ソース･ページ
このパネルに入力するテキストは、生成したメンバ関数を定義する直前に、アプリケーション・ソース・ファイルにそのまま挿入されます。このテキストを使って、生成ファイルにコメントを付けることも、または任意の C++ コードを挿入することもできます。

--------------------------------------------------------
jsstudio

スクリプト･ページ

このページは、jsstudio、または jsstudio の拡張子を使用している場合のみ表示されます。

Rogue Wave Script を使用
アプリケーションで Rogue Wave Script を使用する場合、このトグル･ボタンを選択します。これにより、jsstudio で ILOG スクリプト･ライブラリの初期化に必要なコードが生成されます。

スクリプト･ファイル
アプリケーションを起動すると、スクリプト・ファイルがロードされます。このフィールドに、スクリプト・ファイル名を指定することができます。 

