// -------------------------------------------------------------- -*- C++ -*-
//						 Rogue Wave Views source file
// File: views31/include/ilviews/variable/ostreams.h
// --------------------------------------------------------------------------
//
// Licensed Materials - Property of Rogue Wave Software, Inc.
// (c) Copyright Rogue Wave Software, Inc. 2012, 2018
// (c) Copyright IBM Corp. 2009, 2011
// (c) Copyright ILOG 1992, 2009
// All Rights Reserved.
//
// Note to U.S. Government Users Restricted Rights:
// The Software and Documentation were developed at private expense and
// are "Commercial Items" as that term is defined at 48 CFR 2.101,
// consisting of "Commercial Computer Software" and
// "Commercial Computer Software Documentation", as such terms are
// used in 48 CFR 12.212 or 48 CFR 227.7202-1 through 227.7202-4,
// as applicable.
//
// --------------------------------------------------------------------------
//
// --------------------------------------------------------------------------
/* Header automatically generated by <ilguard>. Don't modify */
#ifndef __Ilv31_Variable_Ostreams_H
#define __Ilv31_Variable_Ostreams_H

#include <ilviews/variable/compilrs.h>

#ifdef ILVV_USE_STREAMPATCH
#if defined(ILVSTD)
#include <cstdlib>
#include <fstream>
#include <strstream>
#else  /* !ILVSTD */
#include <stdlib.h>
#include <fstream.h>
#endif /* !ILVSTD */

typedef long IlvvStreamPos;

class IlvvStrStreamBuffer;

class IlvvOStream
{
public:
   virtual IlvvOStream& operator<<(char c)=0;
   virtual IlvvOStream& operator<<(unsigned char c)=0;
   virtual IlvvOStream& operator<<(const char* s)=0;
   virtual IlvvOStream& operator<<(int a)=0;
   virtual IlvvOStream& operator<<(long l)=0;
   virtual IlvvOStream& operator<<(double d)=0;
   virtual IlvvOStream& operator<<(float f)=0;
   virtual IlvvOStream& operator<<(unsigned int a)=0;
   virtual IlvvOStream& operator<<(unsigned long l)=0;
   virtual IlvvOStream& operator<<(void* p)=0;
   virtual IlvvOStream& operator<<(short i)=0;
   virtual IlvvOStream& operator<<(unsigned short i)=0;
   virtual IlvvOStream& operator<<(IlvvStrStreamBuffer* b)=0;
   // sorry to put these here, but no other way
   IlvvOStream& put(char c);
   IlvvOStream& put(unsigned char c);
   //
   virtual void flush();
   // authorizing manipulators
   IlvvOStream& operator<<(IlvvOStream& (*f)(IlvvOStream&));
   // manipulators implementations
   virtual IlvvOStream& ni();
   virtual IlvvOStream& inow();
   virtual IlvvOStream& bi();
   virtual IlvvOStream& nl();
   virtual IlvvOStream& fnl();
   virtual IlvvOStream& sp();
   virtual IlvvOStream& nih();
};

// no need to flush
inline IlvvOStream& IlvvEndl(IlvvOStream& o){o<<'\n';o.flush();return o;}
inline ILVSTDPREF ostream& IlvvEndl(ILVSTDPREF ostream& o){return o<<endl;}
inline IlvvOStream& IlvvNI(IlvvOStream& o){return o.ni();}
inline IlvvOStream& IlvvNIH(IlvvOStream& o){return o.nih();}
inline IlvvOStream& IlvvIN(IlvvOStream& o){return o.inow();}
inline IlvvOStream& IlvvBI(IlvvOStream& o){return o.bi();}
inline IlvvOStream& IlvvNL(IlvvOStream& o){return o.nl();}
inline IlvvOStream& IlvvFNL(IlvvOStream& o){return o.fnl();}
inline IlvvOStream& IlvvSP(IlvvOStream& o){return o.sp();}
inline IlvvOStream& IlvvFlush(IlvvOStream& o){o.flush();return o;}
inline ILVSTDPREF ostream& IlvvFlush(ILVSTDPREF ostream& o){return o<<flush;}


#define ILVV_BUFMULT 2

class IlvvStrStreamBuffer
{
  friend class IlvvOStrStream;
public:
  IlvvStrStreamBuffer(char* str=0, int size=0, int /*unused*/ =0);
  IlvvStrStreamBuffer(int alloc);
  ~IlvvStrStreamBuffer(){delete _chunk;delete _cdr;}
  int pcount() const {return _pcount;}
  char* str();
  int alloc() const {return _alloc;}
  int size() const {return _size;}
  char* chunk() const {return _chunk;}
  IlvvStrStreamBuffer* cdr() const {return _cdr;}
  static int chunkAlloc(int chars=0){return 64>chars?64:chars;}
  void eat(int chars){_pcount+=chars;_size+=chars;}
  void eat();
  IlvvStrStreamBuffer& manage(int chars);
  char* cursor() const {return _chunk+_size;}
  IlvvStreamPos tellp() const {return (IlvvStreamPos)cursor();}
  void inject(ILVSTDPREF ostream&);
  void inject(IlvvOStrStream&);
protected:
  int _pcount;
  int _alloc;
  int _size;
  char *_chunk;
  IlvvStrStreamBuffer *_cdr;
  // forbidden
  IlvvStrStreamBuffer(const IlvvStrStreamBuffer&);
  void operator=(const IlvvStrStreamBuffer&);
};

class IlvvOStrStream:
public virtual IlvvOStream
{
public:
   IlvvOStrStream(char* str=0, int size=0, int /* unused */ =0);
   ~IlvvOStrStream(){delete _buffer;delete _rd_buffer;}
   char* str() const {return _buffer->str();}
   IlvvOStream& operator<<(char c);
   IlvvOStream& operator<<(unsigned char c);
   IlvvOStream& operator<<(const char* s);
   IlvvOStream& operator<<(int a);
   IlvvOStream& operator<<(long l);
   IlvvOStream& operator<<(double d);
   IlvvOStream& operator<<(float f);
   IlvvOStream& operator<<(unsigned int a);
   IlvvOStream& operator<<(unsigned long l);
   IlvvOStream& operator<<(void* p);
   IlvvOStream& operator<<(short i);
   IlvvOStream& operator<<(unsigned short i);
   IlvvOStream& operator<<(IlvvStrStreamBuffer* b);
   // allowing manipulators on IlvvGenerator
   // specific manipulators
   IlvvOStrStream& operator<<(IlvvOStrStream& (*f)(IlvvOStrStream&));
   int pcount() const {return _buffer->pcount();}
   IlvvStrStreamBuffer* rdbuf();
   char* cursor() const {return _buffer->cursor();}
   IlvvStreamPos tellp() const {return _buffer->tellp();}
   void flush() const {}
private:
   // always valued
   IlvvStrStreamBuffer *_buffer;
   // for keeping after rdbuf, to be deleted at each rdbuf and at dtor
   IlvvStrStreamBuffer *_rd_buffer;
   static int chunkAlloc(int size=0){return IlvvStrStreamBuffer::chunkAlloc(size);}
   void manage(int chars){_buffer=&_buffer->manage(chars);}
   void eat(int chars){_buffer->eat(chars);}
   void eat(){_buffer->eat();}
   // forbiddden
   IlvvOStrStream(const IlvvOStrStream&);
   void operator=(const IlvvOStrStream&);
};

ILVSTDPREF ostream& operator<<(ILVSTDPREF ostream&, IlvvStrStreamBuffer*);

class IlvvOFStream:
public virtual IlvvOStream,
public ILVSTDPREF ofstream
{
public:
  IlvvOFStream();
  IlvvOFStream(const char* name);
  IlvvOFStream(int fd);
  IlvvOStream& operator<<(char c);
  IlvvOStream& operator<<(unsigned char c);
  IlvvOStream& operator<<(const char* s);
  IlvvOStream& operator<<(int a);
  IlvvOStream& operator<<(long l);
  IlvvOStream& operator<<(double d);
  IlvvOStream& operator<<(float f);
  IlvvOStream& operator<<(unsigned int a);
  IlvvOStream& operator<<(unsigned long l);
  IlvvOStream& operator<<(void* p);
  IlvvOStream& operator<<(short i);
  IlvvOStream& operator<<(unsigned short i);
  IlvvOStream& operator<<(IlvvStrStreamBuffer* b);
  void flush();
};

#else
#  if defined(ILVSTD)
#    include <fstream>
#    include <strstream>
#    define IlvvStreamPos std::streampos
#    define IlvvStrStreamBuffer std::strstreambuf
#    include <ilviews/base/iostream.h>
#    define IlvvOStream std::ostream
#    define IlvvOFStream std::ofstream
#    define IlvvEndl endl
#    define IlvvFlush flush
#  else  /* !ILVSTD */
#    define IlvvStreamPos streampos
#    define IlvvStrStreamBuffer strstreambuf
#    if ! (defined(__SUNPRO_CC_COMPAT) && (__SUNPRO_CC_COMPAT >= 5))
class IlvvStrStreamBuffer;
#    endif
#    include <ilviews/base/iostream.h>
#    define IlvvOStream ostream
#    define IlvvOFStream ofstream
#    if ! (defined(__SUNPRO_CC_COMPAT) && (__SUNPRO_CC_COMPAT >= 5))
class IlvvOFStream;
#    endif
#    define IlvvEndl endl
#    define IlvvFlush flush
#  endif /* !ILVSTD */
#endif

#endif
